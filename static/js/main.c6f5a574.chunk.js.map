{"version":3,"sources":["services/api_blob_service.js","components/FilesManager.js","services/api_weather_service.js","components/WeatherMonitor.js","components/App.js","index.js"],"names":["BlobService","_resHandler","res","ok","json","Error","upload","files","callback","data","FormData","file","append","name","fetch","API_BLOB_URL","method","cache","body","then","catch","e","console","log","refreshList","download_link","this","process","REACT_APP_DEV_SERVER_URL","FilesManager","refreshBlobList","service","list","setState","state","className","Input","refresh","onClick","map","size","Item","download","downloadFile","Component","href","ref","createRef","type","multiple","onChange","target","current","value","WeatherService","getWeatherForCity","long","lat","API_WEATHER_URL","WeatherMonitor","props","getOnClick","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","handleCityName","key","runWeatherChart","placeholder","App","path","REACT_APP_FRONT_APP_URL","NavBar","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6f5a574.chunk.js","sourcesContent":["export default class BlobService {\n  constructor() {\n    this.API_BLOB_URL = process.env.REACT_APP_DEV_SERVER_URL + 'api/blob/';\n  }\n\n  _resHandler = (res) => {\n    if (res.ok)\n      return res.json();\n    else throw new Error(res)\n  }\n\n  upload = (files, callback) => {\n    const data = new FormData();\n    for (let file of files) {\n      data.append(file.name, file);\n    }\n    fetch(this.API_BLOB_URL + 'upload', {\n      method: 'POST',\n      cache: 'no-cache',\n      body: data\n    })\n      .then(this._resHandler)\n      .then(callback)\n      .catch(e => {\n        console.log(e);\n        return e\n      })\n  }\n\n  refreshList = (callback = () => {}) => {\n    fetch(this.API_BLOB_URL + 'list')\n      .then(this._resHandler)\n      .then(callback)\n      .catch(e => {\n        console.log(e);\n        return e\n      })\n  }\n\n  download_link = (name) => this.API_BLOB_URL + 'list/' + name;\n\n\n}\n","import React from 'react';\nimport {Component, createRef} from 'react';\nimport BlobService from \"../services/api_blob_service\";\n\nexport default class FilesManager extends Component {\n  constructor() {\n    super();\n    this.state = {list: []};\n    this.service = new BlobService();\n  }\n\n  componentDidMount() {\n    this.refreshBlobList()\n  }\n\n  render() {\n    const {list} = this.state;\n    return (\n      <div className=\"App\">\n        <div className='l-col'>\n          <h4>Upload file</h4>\n          <Input service={this.service} refresh={this.refreshBlobList}/>\n        </div>\n        <div className='r-col'>\n          <button onClick={this.refreshBlobList}>Update list</button>\n          <h4>Download files</h4>\n          <ul>\n            {list.map(({name, size}) => <Item download_link={this.service.download_link} download={this.downloadFile} name={name} size={size} key={name+size}/>)}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  refreshBlobList = () => this.service.refreshList((list) => this.setState({list}));\n\n}\n\nfunction Item({download, download_link, name, size}) {\n  return <li className='ul-item'>\n    <p>{name}</p>\n    <a href={download_link(name)}>get me</a>\n  </li>\n}\n\nconst ref = createRef();\n\nfunction Input({service, refresh}) {\n  return <input type=\"file\" multiple={true}\n                onChange={(e) => {\n                  service.upload(e.target.files, refresh);\n                  ref.current.value = \"\";\n                }}\n                ref={ref}\n  />\n}","export default class WeatherService {\n  constructor() {\n    this.API_WEATHER_URL = process.env.REACT_APP_DEV_SERVER_URL + 'api/weather';\n  }\n\n  _resHandler = (res) => {\n    if (res.ok)\n      return res.json();\n    else throw new Error(res)\n  }\n\n  getWeatherForCity = (long, lat) => {\n    fetch(`${this.API_WEATHER_URL}?long=${long}&lat=${lat}`)\n      .then(this._resHandler)\n      .catch(e => {\n        console.log(e);\n        return e\n      })\n  }\n\n}\n","import {Component} from 'react';\nimport WeatherService from \"../services/api_weather_service\";\n\nexport default class WeatherMonitor extends Component {\n  constructor(props) {\n    super(props);\n    this.service = new WeatherService()\n  }\n\n  state = {\n    long: '0',\n    lat: '0'\n  }\n\n  render() {\n    return <div>\n      <input type=\"button\" value={'Use my location'} onClick={this.getOnClick}/>\n      <input type=\"number\" value={this.state.long} onChange={e => this.handleCityName(e, 'long')}\n             placeholder='longitude'/>\n      <input type=\"number\" value={this.state.lat} onChange={e => this.handleCityName(e, 'lat')} placeholder='latitude'/>\n      <input value={'submit'} type=\"button\" onClick={this.runWeatherChart}/>\n    </div>\n  }\n\n  getOnClick = () =>\n    navigator.geolocation.getCurrentPosition(\n      ({coords: {latitude: lat = 0,longitude: long= 0 }}) =>\n        this.setState({lat, long}))\n\n  handleCityName = ({target: {value}}, key) => this.setState({[key]: value})\n\n  runWeatherChart = () => this.service.getWeatherForCity(this.state.long, this.state.lat)\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport FileManager from './FilesManager';\nimport WeatherMonitor from './WeatherMonitor';\nimport '../styles/App.css';\n\n\nconst App = () => {\n  return <div>\n    <Router>\n      <NavBar/>\n      <Switch>\n        <Route path={process.env.REACT_APP_FRONT_APP_URL + \"/files\"}>\n          <FileManager/>\n        </Route>\n        <Route path={process.env.REACT_APP_FRONT_APP_URL + \"/weather\"}>\n          <WeatherMonitor/>\n        </Route>\n        <Route path={process.env.REACT_APP_FRONT_APP_URL}>\n          <div>\n            <FileManager/>\n            <WeatherMonitor/>\n          </div>\n        </Route>\n      </Switch>\n    </Router>\n  </div>\n}\n\nexport default App;\n\nconst NavBar = () => {\n  return <div>\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/files\">FileManager</Link>\n        </li>\n        <li>\n          <Link to=\"/weather\">Weather</Link>\n        </li>\n      </ul>\n    </nav>\n  </div>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}